// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "kenf1",
            "url": "http://www.github.com/kenf1"
        },
        "license": {
            "name": "GNU GPLv3",
            "url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Simple health-check or greeting endpoint.",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "General"
                ],
                "summary": "Delegator entrypoint",
                "responses": {
                    "200": {
                        "description": "Delegator entrypoint",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/decode/{token}": {
            "get": {
                "description": "Decodes the JWT token provided as a path parameter and returns the claims.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Decode a JWT token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "JWT token to decode",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Decoded JWT claims",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or missing token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to decode token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "description": "Accepts user information and authentication config, returns a JWT token if successful.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Generate a JWT token",
                "parameters": [
                    {
                        "description": "User credentials for token generation",
                        "name": "userInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "JWT token returned as JSON {'token': '...'}",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "description": "Returns a list of all tasks currently stored.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Retrieve all existing tasks",
                "responses": {
                    "200": {
                        "description": "List of tasks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TaskDBRow"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a task by ID using JSON body data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Update an existing task",
                "parameters": [
                    {
                        "description": "Updated task data with existing ID",
                        "name": "TaskDBRow",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskDBRow"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Task updated successfully; no content returned"
                    },
                    "400": {
                        "description": "Invalid JSON body or task not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new task from JSON body. Returns the created task row.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create new task",
                "parameters": [
                    {
                        "description": "Task creation request body",
                        "name": "TaskRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created task",
                        "schema": {
                            "$ref": "#/definitions/models.TaskDBRow"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "description": "Update one or more fields of a task by providing JSON with the task ID and fields to change.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Partially update an existing task",
                "parameters": [
                    {
                        "description": "Partial task update request including task ID",
                        "name": "patch",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PatchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated task returned in response",
                        "schema": {
                            "$ref": "#/definitions/models.TaskDBRow"
                        }
                    },
                    "400": {
                        "description": "Invalid JSON body or missing 'id' field",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Task not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "description": "Fetches a task entry by its unique ID from the database.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get a single task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task found and returned successfully",
                        "schema": {
                            "$ref": "#/definitions/models.TaskDBRow"
                        }
                    },
                    "400": {
                        "description": "Entry not found or invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes the task identified by the given ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Delete a task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID to delete",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Task deleted successfully; no content returned"
                    },
                    "400": {
                        "description": "Entry not found or invalid ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete task due to server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.PatchRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "required",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "task": {
                    "type": "string"
                }
            }
        },
        "models.TaskDBRow": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "uuid string",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "task": {
                    "type": "string"
                }
            }
        },
        "models.TaskRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                },
                "task": {
                    "type": "string"
                }
            }
        },
        "models.UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "org_id": {
                    "type": "integer"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Delegator",
	Description:      "Delegator aka microservices entrypoint",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
